import os
import numpy
from cfmm_base import infotodict as cfmminfodict
from cfmm_base import create_key

def infotodict(seqinfo):
    """Heuristic evaluator for determining which runs belong where

    allowed template fields - follow python string module:

    item: index within category
    subject: participant id
    seqitem: run number during scanning
    subindex: sub index within group
    """

    # call cfmm for general labelling and get dictionary
    info = cfmminfodict(seqinfo)

    movie = create_key('{bids_subject_session_dir}/func/{bids_subject_session_prefix}_task-movie_run-{item:02d}_bold')
    movie_sbref = create_key('{bids_subject_session_dir}/func/{bids_subject_session_prefix}_task-movie_run-{item:02d}_sbref')

  
    nm_comb_echo_GRE = create_key('{bids_subject_session_dir}/anat/{bids_subject_session_prefix}_acq-CombEchoNM_run-{item:02d}_GRE')
    nm_DIS2D_comb_echo_GRE = create_key('{bids_subject_session_dir}/anat/{bids_subject_session_prefix}_acq-CombEchoNM_rec-DIS2D_run-{item:02d}_GRE')
    nm_DIS3D_comb_echo_GRE = create_key('{bids_subject_session_dir}/anat/{bids_subject_session_prefix}_acq-CombEchoNM_rec-DIS3D_run-{item:02d}_GRE')

    nm_mag_echo_GRE = create_key('{bids_subject_session_dir}/anat/{bids_subject_session_prefix}_acq-NM_run-{item:02d}_echo_part-mag_GRE')
    nm_phase_echo_GRE = create_key('{bids_subject_session_dir}/anat/{bids_subject_session_prefix}_acq-NM_run-{item:02d}_echo_part-phase_GRE')
    nm_DIS2D_mag_echo_GRE = create_key('{bids_subject_session_dir}/anat/{bids_subject_session_prefix}_acq-NM_rec-DIS2D_run-{item:02d}_echo_part-mag_GRE')
    nm_DIS2D_phase_echo_GRE = create_key('{bids_subject_session_dir}/anat/{bids_subject_session_prefix}_acq-NM_rec-DIS2D_run-{item:02d}_echo_part-phase_GRE')
    nm_DIS3D_mag_echo_GRE = create_key('{bids_subject_session_dir}/anat/{bids_subject_session_prefix}_acq-NM_rec-DIS3D_run-{item:02d}_echo_part-mag_GRE')
    nm_DIS3D_phase_echo_GRE = create_key('{bids_subject_session_dir}/anat/{bids_subject_session_prefix}_acq-NM_rec-DIS3D_run-{item:02d}_echo_part-mag_GRE')

  
    info[movie]=[]
    info[movie_sbref]=[]
    info[nm_comb_echo_GRE] = []
    info[nm_DIS2D_comb_echo_GRE] = []
    info[nm_DIS3D_comb_echo_GRE] = []
    info[nm_mag_echo_GRE] = []
    info[nm_DIS2D_mag_echo_GRE] = []
    info[nm_DIS3D_mag_echo_GRE] = []
    info[nm_phase_echo_GRE] = []
    info[nm_DIS2D_phase_echo_GRE] = []
    info[nm_DIS3D_phase_echo_GRE] = []  

    for idx, s in enumerate(seqinfo):
       
        #rs func (incl opp phase enc)
        if len(s.image_type) > 2 :
            if ( 'DIFFUSION' in s.image_type[2].strip() ):
                continue
            elif ('bold' in (s.series_description).strip()):
                if (s.dim4==1 and  'SBRef' in (s.series_description).strip()):
                    info[movie_sbref].append({'item': s.series_id})
                elif (s.dim4>1):
                    info[movie].append({'item': s.series_id})


        #NM-GRE
        if ('NM-GRE' in s.series_description ):
            if ('CombEcho' in s.series_description):
                #combined echo
                info[nm_comb_echo_GRE].append({'item': s.series_id})
            else:
                if ('M' in (s.image_type[2].strip())):
                     if ('ND' in (s.image_type[3].strip())):
                        info[nm_mag_echo_GRE].append({'item': s.series_id})
                     if ('DIS2D' in (s.image_type[3].strip())):
                        info[nm_DIS2D_mag_echo_GRE].append({'item': s.series_id})
                     if ('DIS3D' in (s.image_type[3].strip())):
                        info[nm_DIS3D_mag_echo_GRE].append({'item': s.series_id})
    
                if ('P' in (s.image_type[2].strip())):
                     if ('ND' in (s.image_type[3].strip())):
                        info[nm_phase_echo_GRE].append({'item': s.series_id})
                     if ('DIS2D' in (s.image_type[3].strip())):
                        info[nm_DIS2D_phase_echo_GRE].append({'item': s.series_id})
                     if ('DIS3D' in (s.image_type[3].strip())):
                        info[nm_DIS3D_phase_echo_GRE].append({'item': s.series_id})
 
                  
    return info
